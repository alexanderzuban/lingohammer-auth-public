AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  LingoHammer User Pool Setup

Parameters:
  ParentStackName:
    Description: Stack Name
    Type: String
    Default: none    

Resources:
  LingoHammerUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub
        - 'LingoHammerUserPool-${ParentStack}'
        - ParentStack: !Ref ParentStackName      
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          TemporaryPasswordValidityDays: 7  
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: "firstName"
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: "lastName"
          AttributeDataType: String
          Mutable: true
          Required: false
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      EmailVerificationSubject: LingoHammer User Verification
      EmailVerificationMessage: LingoHammer verification code is {####}.
      SmsVerificationMessage: LingoHammer verification code is {####}.
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      MfaConfiguration: "OFF"

  LingoHammerUserPoolClient:
    Type: "AWS::Cognito::UserPoolClient"
    Properties:
      ClientName: !Sub
        - 'LingoHammerUserPoolClient-${ParentStack}'
        - ParentStack: !Ref ParentStackName 
      GenerateSecret: true
      UserPoolId: !Ref LingoHammerUserPool      
      AccessTokenValidity: 1
      RefreshTokenValidity: 30
      IdTokenValidity: 1
      TokenValidityUnits:
        AccessToken: days
        RefreshToken: days
        IdToken: days

      ExplicitAuthFlows:
        - "ALLOW_ADMIN_USER_PASSWORD_AUTH"
        - "ALLOW_USER_PASSWORD_AUTH"
        - "ALLOW_USER_SRP_AUTH"
        - "ALLOW_REFRESH_TOKEN_AUTH" 
    
  LingoHammerSetupIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole    

  LingoHammerSetupPolicy:
    Type: "AWS::IAM::Policy" 
    Properties:
      PolicyName: !Sub
        - 'LingoHammerSetupPolicy-${ParentStack}'
        - ParentStack: !Ref ParentStackName
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - ssm:GetParameter              
              - ssm:PutParameter
              - ssm:DeleteParameter              
              - ssm:GetParametersByPath
            Resource: !Sub
              - 'arn:aws:ssm:*:${AWS::AccountId}:parameter/api/${ParentStack}/*'
              - ParentStack: !Ref ParentStackName
          - Effect: Allow
            Action:
              - cognito-idp:DescribeUserPoolClient
              - cognito-idp:ListUserPoolClients
            Resource: !GetAtt LingoHammerUserPool.Arn              
          - Effect: Allow
            Action:
              - kms:Encrypt 
            Resource:  !Sub 'arn:aws:kms:*:${AWS::AccountId}:key/alias/aws/ssm'
          - Effect: Allow
            Action:
              - logs:CreateLogStream 
              - logs:CreateLogGroup              
              - logs:PutLogEvents
            Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*'
          - Effect: Allow
            Action:
              - cloudformation:*
            Resource: '*'
      Roles:
        - !Ref LingoHammerSetupIAMRole    
   
  LingoHammerSetupFunction:
      Type: AWS::Lambda::Function
      DependsOn: LingoHammerSetupPolicy
      Properties:
        FunctionName: !Sub
          - 'LingoHammerSetupFunction-${ParentStack}'
          - ParentStack: !Ref ParentStackName
        Runtime: python3.8
        Architectures:
          - x86_64
        Handler: index.handler        
        Role: !GetAtt LingoHammerSetupIAMRole.Arn
        Code: 
          ZipFile: |
            import boto3
            import cfnresponse

            ssm = boto3.client('ssm')
            cognito = boto3.client('cognito-idp')

            def handler(event, context):
                print('Event:')
                print(event)
                
                request_type = event['RequestType']
                resource_properties = event['ResourceProperties']
                user_pool_id = resource_properties['UserPoolId']
                client_id = resource_properties['UserPoolClientId']
                parameter_name = resource_properties['ParameterName']
                try:
                    if request_type == 'Create' or request_type == 'Update':
                        # Get the User Pool Client details
                        user_pool_client = cognito.describe_user_pool_client(
                            UserPoolId=user_pool_id,
                            ClientId=client_id
                        )

                        client_secret = user_pool_client['UserPoolClient']['ClientSecret']

                        # Write the Client Secret to SSM Parameter Store
                        put_parameter(parameter_name + "/userPoolId",user_pool_id)
                        put_parameter(parameter_name + "/userPoolClientId",client_id)    
                        put_parameter(parameter_name + "/userPoolClientSecret",client_secret)

                        # Send a response back to CloudFormation indicating success
                        return send_response(event, context, 'SUCCESS', client_secret)
                    elif request_type == 'Delete':
                    
                            # If it's a Delete event, you may choose to delete the SSM parameter if needed
                            delete_parameter(parameter_name + "/userPoolId")
                            delete_parameter(parameter_name + "/userPoolClientId")
                            delete_parameter(parameter_name + "/userPoolClientSecret")
                            
                            return send_response(event, context, 'SUCCESS')
                except Exception as e:
                    print(e)
                    return send_response(event, context, 'FAILED')

            def delete_parameter(name):
                try:
                    ssm.delete_parameter(Name=name)
                except Exception as e:
                    print(e)      

            def put_parameter(name, value):
                try:
                    ssm.put_parameter(
                        Name=name,
                        Value=value,
                        Type="SecureString",
                        Overwrite=True
                    )
                except Exception as e:
                    print(e)
                

            def send_response(event, context, response_status, client_secret=""):             
                responseData = {}
                responseData['Data'] = client_secret
                cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, "CustomResourcePhysicalID")

      
  
  LingoHammerSetupFunctionResource:
    Type: AWS::CloudFormation::CustomResource
    DependsOn: LingoHammerSetupFunction
    Properties:
      ServiceToken: !GetAtt LingoHammerSetupFunction.Arn
      UserPoolId: !Ref LingoHammerUserPool
      UserPoolClientId: !Ref LingoHammerUserPoolClient
      ParameterName: !Sub
              - '/api/${ParentStack}/userPool'
              - ParentStack: !Ref ParentStackName

Outputs:
  UserPoolId:
    Value: !Ref LingoHammerUserPool
  UserPoolArn:
    Value: !GetAtt LingoHammerUserPool.Arn
  UserPoolClientId:
    Value: !Ref LingoHammerUserPoolClient
